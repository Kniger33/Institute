
(* lexical analyzer template (TP Lex V3.0), V1.0 3-2-91 AG *)

(* global definitions: *)
 unit test;
 interface
 const num=257; dec=258; id=259; _var=260; _if=261; _then=262; _else=263; _begin=264; _end=265;        _and=266; _or=267; _round=268; lex_error=404;
 function yylex: Integer;
 implementation
 uses lexlib;

function yylex : Integer;

procedure yyaction ( yyruleno : Integer );
  (* local definitions: *)
begin
  (* actions: *)
  case yyruleno of
  1:
     		returni(_var);
  2:
    		returni(_if);
  3:
      		returni(_then);
  4:
      		returni(_else);
  5:
       		returni(_begin);
  6:
     		returni(_end);
  7:
     		returni(_and);
  8:
    		returni(_or);
  9:
       		returni(_round);

  10:
                returni(num);
  11:
             	returni(dec);
  12:
                returni(id);

  13:
                returnc('+');
  14:
  		returnc('-');
  15:
  		returnc('*');
  16:
  		returnc('/');
  17:
  		returnc('<');
  18:
  		returnc('>');
  19:
  		returnc('=');
  20:
  		returnc(';');
  21:
  		returnc(':');
  22:
  		returnc('(');
  23:
  		returnc(')');
  24:
                ;
  25:
                returni(lex_error);
  end;
end(*yyaction*);

(* DFA table: *)

type YYTRec = record
                cc : set of Char;
                s  : Integer;
              end;

const

yynmarks   = 79;
yynmatches = 79;
yyntrans   = 106;
yynstates  = 51;

yyk : array [1..yynmarks] of Integer = (
  { 0: }
  { 1: }
  { 2: }
  12,
  25,
  { 3: }
  12,
  25,
  { 4: }
  12,
  25,
  { 5: }
  12,
  25,
  { 6: }
  12,
  25,
  { 7: }
  12,
  25,
  { 8: }
  12,
  25,
  { 9: }
  12,
  25,
  { 10: }
  10,
  25,
  { 11: }
  12,
  25,
  { 12: }
  13,
  25,
  { 13: }
  14,
  25,
  { 14: }
  15,
  25,
  { 15: }
  16,
  25,
  { 16: }
  17,
  25,
  { 17: }
  18,
  25,
  { 18: }
  19,
  25,
  { 19: }
  20,
  25,
  { 20: }
  21,
  25,
  { 21: }
  22,
  25,
  { 22: }
  23,
  25,
  { 23: }
  24,
  25,
  { 24: }
  25,
  { 25: }
  12,
  { 26: }
  12,
  { 27: }
  2,
  12,
  { 28: }
  12,
  { 29: }
  12,
  { 30: }
  12,
  { 31: }
  12,
  { 32: }
  12,
  { 33: }
  8,
  12,
  { 34: }
  12,
  { 35: }
  10,
  { 36: }
  { 37: }
  1,
  12,
  { 38: }
  12,
  { 39: }
  12,
  { 40: }
  6,
  12,
  { 41: }
  12,
  { 42: }
  7,
  12,
  { 43: }
  12,
  { 44: }
  11,
  { 45: }
  3,
  12,
  { 46: }
  4,
  12,
  { 47: }
  12,
  { 48: }
  12,
  { 49: }
  5,
  12,
  { 50: }
  9,
  12
);

yym : array [1..yynmatches] of Integer = (
{ 0: }
{ 1: }
{ 2: }
  12,
  25,
{ 3: }
  12,
  25,
{ 4: }
  12,
  25,
{ 5: }
  12,
  25,
{ 6: }
  12,
  25,
{ 7: }
  12,
  25,
{ 8: }
  12,
  25,
{ 9: }
  12,
  25,
{ 10: }
  10,
  25,
{ 11: }
  12,
  25,
{ 12: }
  13,
  25,
{ 13: }
  14,
  25,
{ 14: }
  15,
  25,
{ 15: }
  16,
  25,
{ 16: }
  17,
  25,
{ 17: }
  18,
  25,
{ 18: }
  19,
  25,
{ 19: }
  20,
  25,
{ 20: }
  21,
  25,
{ 21: }
  22,
  25,
{ 22: }
  23,
  25,
{ 23: }
  24,
  25,
{ 24: }
  25,
{ 25: }
  12,
{ 26: }
  12,
{ 27: }
  2,
  12,
{ 28: }
  12,
{ 29: }
  12,
{ 30: }
  12,
{ 31: }
  12,
{ 32: }
  12,
{ 33: }
  8,
  12,
{ 34: }
  12,
{ 35: }
  10,
{ 36: }
{ 37: }
  1,
  12,
{ 38: }
  12,
{ 39: }
  12,
{ 40: }
  6,
  12,
{ 41: }
  12,
{ 42: }
  7,
  12,
{ 43: }
  12,
{ 44: }
  11,
{ 45: }
  3,
  12,
{ 46: }
  4,
  12,
{ 47: }
  12,
{ 48: }
  12,
{ 49: }
  5,
  12,
{ 50: }
  9,
  12
);

yyt : array [1..yyntrans] of YYTrec = (
{ 0: }
  ( cc: [ #1..#9,#11..#31,'!'..'''',',','.','?','@',
            '['..'`','{'..#255 ]; s: 24),
  ( cc: [ ' ' ]; s: 23),
  ( cc: [ '(' ]; s: 21),
  ( cc: [ ')' ]; s: 22),
  ( cc: [ '*' ]; s: 14),
  ( cc: [ '+' ]; s: 12),
  ( cc: [ '-' ]; s: 13),
  ( cc: [ '/' ]; s: 15),
  ( cc: [ '0'..'9' ]; s: 10),
  ( cc: [ ':' ]; s: 20),
  ( cc: [ ';' ]; s: 19),
  ( cc: [ '<' ]; s: 16),
  ( cc: [ '=' ]; s: 18),
  ( cc: [ '>' ]; s: 17),
  ( cc: [ 'A'..'Z','c','d','f'..'h','j'..'n','p','q',
            's','u','w'..'z' ]; s: 11),
  ( cc: [ 'a' ]; s: 7),
  ( cc: [ 'b' ]; s: 6),
  ( cc: [ 'e' ]; s: 5),
  ( cc: [ 'i' ]; s: 3),
  ( cc: [ 'o' ]; s: 8),
  ( cc: [ 'r' ]; s: 9),
  ( cc: [ 't' ]; s: 4),
  ( cc: [ 'v' ]; s: 2),
{ 1: }
  ( cc: [ #1..#9,#11..#31,'!'..'''',',','.','?','@',
            '['..'`','{'..#255 ]; s: 24),
  ( cc: [ ' ' ]; s: 23),
  ( cc: [ '(' ]; s: 21),
  ( cc: [ ')' ]; s: 22),
  ( cc: [ '*' ]; s: 14),
  ( cc: [ '+' ]; s: 12),
  ( cc: [ '-' ]; s: 13),
  ( cc: [ '/' ]; s: 15),
  ( cc: [ '0'..'9' ]; s: 10),
  ( cc: [ ':' ]; s: 20),
  ( cc: [ ';' ]; s: 19),
  ( cc: [ '<' ]; s: 16),
  ( cc: [ '=' ]; s: 18),
  ( cc: [ '>' ]; s: 17),
  ( cc: [ 'A'..'Z','c','d','f'..'h','j'..'n','p','q',
            's','u','w'..'z' ]; s: 11),
  ( cc: [ 'a' ]; s: 7),
  ( cc: [ 'b' ]; s: 6),
  ( cc: [ 'e' ]; s: 5),
  ( cc: [ 'i' ]; s: 3),
  ( cc: [ 'o' ]; s: 8),
  ( cc: [ 'r' ]; s: 9),
  ( cc: [ 't' ]; s: 4),
  ( cc: [ 'v' ]; s: 2),
{ 2: }
  ( cc: [ '0'..'9','A'..'Z','b'..'z' ]; s: 26),
  ( cc: [ 'a' ]; s: 25),
{ 3: }
  ( cc: [ '0'..'9','A'..'Z','a'..'e','g'..'z' ]; s: 26),
  ( cc: [ 'f' ]; s: 27),
{ 4: }
  ( cc: [ '0'..'9','A'..'Z','a'..'g','i'..'z' ]; s: 26),
  ( cc: [ 'h' ]; s: 28),
{ 5: }
  ( cc: [ '0'..'9','A'..'Z','a'..'k','m','o'..'z' ]; s: 26),
  ( cc: [ 'l' ]; s: 29),
  ( cc: [ 'n' ]; s: 30),
{ 6: }
  ( cc: [ '0'..'9','A'..'Z','a'..'d','f'..'z' ]; s: 26),
  ( cc: [ 'e' ]; s: 31),
{ 7: }
  ( cc: [ '0'..'9','A'..'Z','a'..'m','o'..'z' ]; s: 26),
  ( cc: [ 'n' ]; s: 32),
{ 8: }
  ( cc: [ '0'..'9','A'..'Z','a'..'q','s'..'z' ]; s: 26),
  ( cc: [ 'r' ]; s: 33),
{ 9: }
  ( cc: [ '0'..'9','A'..'Z','a'..'n','p'..'z' ]; s: 26),
  ( cc: [ 'o' ]; s: 34),
{ 10: }
  ( cc: [ '''',',','.' ]; s: 36),
  ( cc: [ '0'..'9' ]; s: 35),
{ 11: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 26),
{ 12: }
{ 13: }
{ 14: }
{ 15: }
{ 16: }
{ 17: }
{ 18: }
{ 19: }
{ 20: }
{ 21: }
{ 22: }
{ 23: }
{ 24: }
{ 25: }
  ( cc: [ '0'..'9','A'..'Z','a'..'q','s'..'z' ]; s: 26),
  ( cc: [ 'r' ]; s: 37),
{ 26: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 26),
{ 27: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 26),
{ 28: }
  ( cc: [ '0'..'9','A'..'Z','a'..'d','f'..'z' ]; s: 26),
  ( cc: [ 'e' ]; s: 38),
{ 29: }
  ( cc: [ '0'..'9','A'..'Z','a'..'r','t'..'z' ]; s: 26),
  ( cc: [ 's' ]; s: 39),
{ 30: }
  ( cc: [ '0'..'9','A'..'Z','a'..'c','e'..'z' ]; s: 26),
  ( cc: [ 'd' ]; s: 40),
{ 31: }
  ( cc: [ '0'..'9','A'..'Z','a'..'f','h'..'z' ]; s: 26),
  ( cc: [ 'g' ]; s: 41),
{ 32: }
  ( cc: [ '0'..'9','A'..'Z','a'..'c','e'..'z' ]; s: 26),
  ( cc: [ 'd' ]; s: 42),
{ 33: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 26),
{ 34: }
  ( cc: [ '0'..'9','A'..'Z','a'..'t','v'..'z' ]; s: 26),
  ( cc: [ 'u' ]; s: 43),
{ 35: }
  ( cc: [ '''',',','.' ]; s: 36),
  ( cc: [ '0'..'9' ]; s: 35),
{ 36: }
  ( cc: [ '0'..'9' ]; s: 44),
{ 37: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 26),
{ 38: }
  ( cc: [ '0'..'9','A'..'Z','a'..'m','o'..'z' ]; s: 26),
  ( cc: [ 'n' ]; s: 45),
{ 39: }
  ( cc: [ '0'..'9','A'..'Z','a'..'d','f'..'z' ]; s: 26),
  ( cc: [ 'e' ]; s: 46),
{ 40: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 26),
{ 41: }
  ( cc: [ '0'..'9','A'..'Z','a'..'h','j'..'z' ]; s: 26),
  ( cc: [ 'i' ]; s: 47),
{ 42: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 26),
{ 43: }
  ( cc: [ '0'..'9','A'..'Z','a'..'m','o'..'z' ]; s: 26),
  ( cc: [ 'n' ]; s: 48),
{ 44: }
  ( cc: [ '0'..'9' ]; s: 44),
{ 45: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 26),
{ 46: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 26),
{ 47: }
  ( cc: [ '0'..'9','A'..'Z','a'..'m','o'..'z' ]; s: 26),
  ( cc: [ 'n' ]; s: 49),
{ 48: }
  ( cc: [ '0'..'9','A'..'Z','a'..'c','e'..'z' ]; s: 26),
  ( cc: [ 'd' ]; s: 50),
{ 49: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 26),
{ 50: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 26)
);

yykl : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 1,
{ 2: } 1,
{ 3: } 3,
{ 4: } 5,
{ 5: } 7,
{ 6: } 9,
{ 7: } 11,
{ 8: } 13,
{ 9: } 15,
{ 10: } 17,
{ 11: } 19,
{ 12: } 21,
{ 13: } 23,
{ 14: } 25,
{ 15: } 27,
{ 16: } 29,
{ 17: } 31,
{ 18: } 33,
{ 19: } 35,
{ 20: } 37,
{ 21: } 39,
{ 22: } 41,
{ 23: } 43,
{ 24: } 45,
{ 25: } 46,
{ 26: } 47,
{ 27: } 48,
{ 28: } 50,
{ 29: } 51,
{ 30: } 52,
{ 31: } 53,
{ 32: } 54,
{ 33: } 55,
{ 34: } 57,
{ 35: } 58,
{ 36: } 59,
{ 37: } 59,
{ 38: } 61,
{ 39: } 62,
{ 40: } 63,
{ 41: } 65,
{ 42: } 66,
{ 43: } 68,
{ 44: } 69,
{ 45: } 70,
{ 46: } 72,
{ 47: } 74,
{ 48: } 75,
{ 49: } 76,
{ 50: } 78
);

yykh : array [0..yynstates-1] of Integer = (
{ 0: } 0,
{ 1: } 0,
{ 2: } 2,
{ 3: } 4,
{ 4: } 6,
{ 5: } 8,
{ 6: } 10,
{ 7: } 12,
{ 8: } 14,
{ 9: } 16,
{ 10: } 18,
{ 11: } 20,
{ 12: } 22,
{ 13: } 24,
{ 14: } 26,
{ 15: } 28,
{ 16: } 30,
{ 17: } 32,
{ 18: } 34,
{ 19: } 36,
{ 20: } 38,
{ 21: } 40,
{ 22: } 42,
{ 23: } 44,
{ 24: } 45,
{ 25: } 46,
{ 26: } 47,
{ 27: } 49,
{ 28: } 50,
{ 29: } 51,
{ 30: } 52,
{ 31: } 53,
{ 32: } 54,
{ 33: } 56,
{ 34: } 57,
{ 35: } 58,
{ 36: } 58,
{ 37: } 60,
{ 38: } 61,
{ 39: } 62,
{ 40: } 64,
{ 41: } 65,
{ 42: } 67,
{ 43: } 68,
{ 44: } 69,
{ 45: } 71,
{ 46: } 73,
{ 47: } 74,
{ 48: } 75,
{ 49: } 77,
{ 50: } 79
);

yyml : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 1,
{ 2: } 1,
{ 3: } 3,
{ 4: } 5,
{ 5: } 7,
{ 6: } 9,
{ 7: } 11,
{ 8: } 13,
{ 9: } 15,
{ 10: } 17,
{ 11: } 19,
{ 12: } 21,
{ 13: } 23,
{ 14: } 25,
{ 15: } 27,
{ 16: } 29,
{ 17: } 31,
{ 18: } 33,
{ 19: } 35,
{ 20: } 37,
{ 21: } 39,
{ 22: } 41,
{ 23: } 43,
{ 24: } 45,
{ 25: } 46,
{ 26: } 47,
{ 27: } 48,
{ 28: } 50,
{ 29: } 51,
{ 30: } 52,
{ 31: } 53,
{ 32: } 54,
{ 33: } 55,
{ 34: } 57,
{ 35: } 58,
{ 36: } 59,
{ 37: } 59,
{ 38: } 61,
{ 39: } 62,
{ 40: } 63,
{ 41: } 65,
{ 42: } 66,
{ 43: } 68,
{ 44: } 69,
{ 45: } 70,
{ 46: } 72,
{ 47: } 74,
{ 48: } 75,
{ 49: } 76,
{ 50: } 78
);

yymh : array [0..yynstates-1] of Integer = (
{ 0: } 0,
{ 1: } 0,
{ 2: } 2,
{ 3: } 4,
{ 4: } 6,
{ 5: } 8,
{ 6: } 10,
{ 7: } 12,
{ 8: } 14,
{ 9: } 16,
{ 10: } 18,
{ 11: } 20,
{ 12: } 22,
{ 13: } 24,
{ 14: } 26,
{ 15: } 28,
{ 16: } 30,
{ 17: } 32,
{ 18: } 34,
{ 19: } 36,
{ 20: } 38,
{ 21: } 40,
{ 22: } 42,
{ 23: } 44,
{ 24: } 45,
{ 25: } 46,
{ 26: } 47,
{ 27: } 49,
{ 28: } 50,
{ 29: } 51,
{ 30: } 52,
{ 31: } 53,
{ 32: } 54,
{ 33: } 56,
{ 34: } 57,
{ 35: } 58,
{ 36: } 58,
{ 37: } 60,
{ 38: } 61,
{ 39: } 62,
{ 40: } 64,
{ 41: } 65,
{ 42: } 67,
{ 43: } 68,
{ 44: } 69,
{ 45: } 71,
{ 46: } 73,
{ 47: } 74,
{ 48: } 75,
{ 49: } 77,
{ 50: } 79
);

yytl : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 24,
{ 2: } 47,
{ 3: } 49,
{ 4: } 51,
{ 5: } 53,
{ 6: } 56,
{ 7: } 58,
{ 8: } 60,
{ 9: } 62,
{ 10: } 64,
{ 11: } 66,
{ 12: } 67,
{ 13: } 67,
{ 14: } 67,
{ 15: } 67,
{ 16: } 67,
{ 17: } 67,
{ 18: } 67,
{ 19: } 67,
{ 20: } 67,
{ 21: } 67,
{ 22: } 67,
{ 23: } 67,
{ 24: } 67,
{ 25: } 67,
{ 26: } 69,
{ 27: } 70,
{ 28: } 71,
{ 29: } 73,
{ 30: } 75,
{ 31: } 77,
{ 32: } 79,
{ 33: } 81,
{ 34: } 82,
{ 35: } 84,
{ 36: } 86,
{ 37: } 87,
{ 38: } 88,
{ 39: } 90,
{ 40: } 92,
{ 41: } 93,
{ 42: } 95,
{ 43: } 96,
{ 44: } 98,
{ 45: } 99,
{ 46: } 100,
{ 47: } 101,
{ 48: } 103,
{ 49: } 105,
{ 50: } 106
);

yyth : array [0..yynstates-1] of Integer = (
{ 0: } 23,
{ 1: } 46,
{ 2: } 48,
{ 3: } 50,
{ 4: } 52,
{ 5: } 55,
{ 6: } 57,
{ 7: } 59,
{ 8: } 61,
{ 9: } 63,
{ 10: } 65,
{ 11: } 66,
{ 12: } 66,
{ 13: } 66,
{ 14: } 66,
{ 15: } 66,
{ 16: } 66,
{ 17: } 66,
{ 18: } 66,
{ 19: } 66,
{ 20: } 66,
{ 21: } 66,
{ 22: } 66,
{ 23: } 66,
{ 24: } 66,
{ 25: } 68,
{ 26: } 69,
{ 27: } 70,
{ 28: } 72,
{ 29: } 74,
{ 30: } 76,
{ 31: } 78,
{ 32: } 80,
{ 33: } 81,
{ 34: } 83,
{ 35: } 85,
{ 36: } 86,
{ 37: } 87,
{ 38: } 89,
{ 39: } 91,
{ 40: } 92,
{ 41: } 94,
{ 42: } 95,
{ 43: } 97,
{ 44: } 98,
{ 45: } 99,
{ 46: } 100,
{ 47: } 102,
{ 48: } 104,
{ 49: } 105,
{ 50: } 106
);


var yyn : Integer;

label start, scan, action;

begin

start:

  (* initialize: *)

  yynew;

scan:

  (* mark positions and matches: *)

  for yyn := yykl[yystate] to     yykh[yystate] do yymark(yyk[yyn]);
  for yyn := yymh[yystate] downto yyml[yystate] do yymatch(yym[yyn]);

  if yytl[yystate]>yyth[yystate] then goto action; (* dead state *)

  (* get next character: *)

  yyscan;

  (* determine action: *)

  yyn := yytl[yystate];
  while (yyn<=yyth[yystate]) and not (yyactchar in yyt[yyn].cc) do inc(yyn);
  if yyn>yyth[yystate] then goto action;
    (* no transition on yyactchar in this state *)

  (* switch to new state: *)

  yystate := yyt[yyn].s;

  goto scan;

action:

  (* execute action: *)

  if yyfind(yyrule) then
    begin
      yyaction(yyrule);
      if yyreject then goto action;
    end
  else if not yydefault and yywrap then
    begin
      yyclear;
      returni(0);
    end;

  if not yydone then goto start;

  yylex := yyretval;

end(*yylex*);


end. 
