
(* lexical analyzer template (TP Lex V3.0), V1.0 3-2-91 AG *)

(* global definitions: *)
 unit test;
 interface
 const num=257; dec=258; id=259; select_t=260; from_t=261; where_t=262; or_t=263; and_t=264;
       lex_error=404;
 function yylex: Integer;
 implementation
 uses lexlib;

function yylex : Integer;

procedure yyaction ( yyruleno : Integer );
  (* local definitions: *)
begin
  (* actions: *)
  case yyruleno of
  1:
                returni(num);
  2:
             	returni(dec);

  3:
        	returni(select_t);
  4:
      		returni(from_t);
  5:
       		returni(where_t);
  6:
    		returni(or_t);
  7:
     		returni(and_t);
  8:
                returni(id);


  9:
  		returnc('<');
  10:
  		returnc('>');
  11:
  		returnc('=');
  12:
  		returnc(',');

  13:
       		;
  14:
       		returni(lex_error);
  end;
end(*yyaction*);

(* DFA table: *)

type YYTRec = record
                cc : set of Char;
                s  : Integer;
              end;

const

yynmarks   = 48;
yynmatches = 48;
yyntrans   = 69;
yynstates  = 34;

yyk : array [1..yynmarks] of Integer = (
  { 0: }
  { 1: }
  { 2: }
  1,
  14,
  { 3: }
  8,
  14,
  { 4: }
  8,
  14,
  { 5: }
  8,
  14,
  { 6: }
  8,
  14,
  { 7: }
  8,
  14,
  { 8: }
  8,
  14,
  { 9: }
  9,
  14,
  { 10: }
  10,
  14,
  { 11: }
  11,
  14,
  { 12: }
  12,
  14,
  { 13: }
  13,
  14,
  { 14: }
  14,
  { 15: }
  1,
  { 16: }
  { 17: }
  8,
  { 18: }
  8,
  { 19: }
  8,
  { 20: }
  8,
  { 21: }
  6,
  8,
  { 22: }
  8,
  { 23: }
  2,
  { 24: }
  8,
  { 25: }
  8,
  { 26: }
  8,
  { 27: }
  7,
  8,
  { 28: }
  8,
  { 29: }
  4,
  8,
  { 30: }
  8,
  { 31: }
  8,
  { 32: }
  5,
  8,
  { 33: }
  3,
  8
);

yym : array [1..yynmatches] of Integer = (
{ 0: }
{ 1: }
{ 2: }
  1,
  14,
{ 3: }
  8,
  14,
{ 4: }
  8,
  14,
{ 5: }
  8,
  14,
{ 6: }
  8,
  14,
{ 7: }
  8,
  14,
{ 8: }
  8,
  14,
{ 9: }
  9,
  14,
{ 10: }
  10,
  14,
{ 11: }
  11,
  14,
{ 12: }
  12,
  14,
{ 13: }
  13,
  14,
{ 14: }
  14,
{ 15: }
  1,
{ 16: }
{ 17: }
  8,
{ 18: }
  8,
{ 19: }
  8,
{ 20: }
  8,
{ 21: }
  6,
  8,
{ 22: }
  8,
{ 23: }
  2,
{ 24: }
  8,
{ 25: }
  8,
{ 26: }
  8,
{ 27: }
  7,
  8,
{ 28: }
  8,
{ 29: }
  4,
  8,
{ 30: }
  8,
{ 31: }
  8,
{ 32: }
  5,
  8,
{ 33: }
  3,
  8
);

yyt : array [1..yyntrans] of YYTrec = (
{ 0: }
  ( cc: [ #1..#9,#11..#31,'!'..'+','-'..'/',':',';',
            '?','@','['..'`','{'..#255 ]; s: 14),
  ( cc: [ ' ' ]; s: 13),
  ( cc: [ ',' ]; s: 12),
  ( cc: [ '0'..'9' ]; s: 2),
  ( cc: [ '<' ]; s: 9),
  ( cc: [ '=' ]; s: 11),
  ( cc: [ '>' ]; s: 10),
  ( cc: [ 'A'..'Z','b'..'e','g'..'n','p'..'r','t'..'v',
            'x'..'z' ]; s: 8),
  ( cc: [ 'a' ]; s: 7),
  ( cc: [ 'f' ]; s: 4),
  ( cc: [ 'o' ]; s: 6),
  ( cc: [ 's' ]; s: 3),
  ( cc: [ 'w' ]; s: 5),
{ 1: }
  ( cc: [ #1..#9,#11..#31,'!'..'+','-'..'/',':',';',
            '?','@','['..'`','{'..#255 ]; s: 14),
  ( cc: [ ' ' ]; s: 13),
  ( cc: [ ',' ]; s: 12),
  ( cc: [ '0'..'9' ]; s: 2),
  ( cc: [ '<' ]; s: 9),
  ( cc: [ '=' ]; s: 11),
  ( cc: [ '>' ]; s: 10),
  ( cc: [ 'A'..'Z','b'..'e','g'..'n','p'..'r','t'..'v',
            'x'..'z' ]; s: 8),
  ( cc: [ 'a' ]; s: 7),
  ( cc: [ 'f' ]; s: 4),
  ( cc: [ 'o' ]; s: 6),
  ( cc: [ 's' ]; s: 3),
  ( cc: [ 'w' ]; s: 5),
{ 2: }
  ( cc: [ '''',',','.' ]; s: 16),
  ( cc: [ '0'..'9' ]; s: 15),
{ 3: }
  ( cc: [ '0'..'9','A'..'Z','a'..'d','f'..'z' ]; s: 18),
  ( cc: [ 'e' ]; s: 17),
{ 4: }
  ( cc: [ '0'..'9','A'..'Z','a'..'q','s'..'z' ]; s: 18),
  ( cc: [ 'r' ]; s: 19),
{ 5: }
  ( cc: [ '0'..'9','A'..'Z','a'..'g','i'..'z' ]; s: 18),
  ( cc: [ 'h' ]; s: 20),
{ 6: }
  ( cc: [ '0'..'9','A'..'Z','a'..'q','s'..'z' ]; s: 18),
  ( cc: [ 'r' ]; s: 21),
{ 7: }
  ( cc: [ '0'..'9','A'..'Z','a'..'m','o'..'z' ]; s: 18),
  ( cc: [ 'n' ]; s: 22),
{ 8: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 18),
{ 9: }
{ 10: }
{ 11: }
{ 12: }
{ 13: }
{ 14: }
{ 15: }
  ( cc: [ '''',',','.' ]; s: 16),
  ( cc: [ '0'..'9' ]; s: 15),
{ 16: }
  ( cc: [ '0'..'9' ]; s: 23),
{ 17: }
  ( cc: [ '0'..'9','A'..'Z','a'..'k','m'..'z' ]; s: 18),
  ( cc: [ 'l' ]; s: 24),
{ 18: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 18),
{ 19: }
  ( cc: [ '0'..'9','A'..'Z','a'..'n','p'..'z' ]; s: 18),
  ( cc: [ 'o' ]; s: 25),
{ 20: }
  ( cc: [ '0'..'9','A'..'Z','a'..'d','f'..'z' ]; s: 18),
  ( cc: [ 'e' ]; s: 26),
{ 21: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 18),
{ 22: }
  ( cc: [ '0'..'9','A'..'Z','a'..'c','e'..'z' ]; s: 18),
  ( cc: [ 'd' ]; s: 27),
{ 23: }
  ( cc: [ '0'..'9' ]; s: 23),
{ 24: }
  ( cc: [ '0'..'9','A'..'Z','a'..'d','f'..'z' ]; s: 18),
  ( cc: [ 'e' ]; s: 28),
{ 25: }
  ( cc: [ '0'..'9','A'..'Z','a'..'l','n'..'z' ]; s: 18),
  ( cc: [ 'm' ]; s: 29),
{ 26: }
  ( cc: [ '0'..'9','A'..'Z','a'..'q','s'..'z' ]; s: 18),
  ( cc: [ 'r' ]; s: 30),
{ 27: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 18),
{ 28: }
  ( cc: [ '0'..'9','A'..'Z','a','b','d'..'z' ]; s: 18),
  ( cc: [ 'c' ]; s: 31),
{ 29: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 18),
{ 30: }
  ( cc: [ '0'..'9','A'..'Z','a'..'d','f'..'z' ]; s: 18),
  ( cc: [ 'e' ]; s: 32),
{ 31: }
  ( cc: [ '0'..'9','A'..'Z','a'..'s','u'..'z' ]; s: 18),
  ( cc: [ 't' ]; s: 33),
{ 32: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 18),
{ 33: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 18)
);

yykl : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 1,
{ 2: } 1,
{ 3: } 3,
{ 4: } 5,
{ 5: } 7,
{ 6: } 9,
{ 7: } 11,
{ 8: } 13,
{ 9: } 15,
{ 10: } 17,
{ 11: } 19,
{ 12: } 21,
{ 13: } 23,
{ 14: } 25,
{ 15: } 26,
{ 16: } 27,
{ 17: } 27,
{ 18: } 28,
{ 19: } 29,
{ 20: } 30,
{ 21: } 31,
{ 22: } 33,
{ 23: } 34,
{ 24: } 35,
{ 25: } 36,
{ 26: } 37,
{ 27: } 38,
{ 28: } 40,
{ 29: } 41,
{ 30: } 43,
{ 31: } 44,
{ 32: } 45,
{ 33: } 47
);

yykh : array [0..yynstates-1] of Integer = (
{ 0: } 0,
{ 1: } 0,
{ 2: } 2,
{ 3: } 4,
{ 4: } 6,
{ 5: } 8,
{ 6: } 10,
{ 7: } 12,
{ 8: } 14,
{ 9: } 16,
{ 10: } 18,
{ 11: } 20,
{ 12: } 22,
{ 13: } 24,
{ 14: } 25,
{ 15: } 26,
{ 16: } 26,
{ 17: } 27,
{ 18: } 28,
{ 19: } 29,
{ 20: } 30,
{ 21: } 32,
{ 22: } 33,
{ 23: } 34,
{ 24: } 35,
{ 25: } 36,
{ 26: } 37,
{ 27: } 39,
{ 28: } 40,
{ 29: } 42,
{ 30: } 43,
{ 31: } 44,
{ 32: } 46,
{ 33: } 48
);

yyml : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 1,
{ 2: } 1,
{ 3: } 3,
{ 4: } 5,
{ 5: } 7,
{ 6: } 9,
{ 7: } 11,
{ 8: } 13,
{ 9: } 15,
{ 10: } 17,
{ 11: } 19,
{ 12: } 21,
{ 13: } 23,
{ 14: } 25,
{ 15: } 26,
{ 16: } 27,
{ 17: } 27,
{ 18: } 28,
{ 19: } 29,
{ 20: } 30,
{ 21: } 31,
{ 22: } 33,
{ 23: } 34,
{ 24: } 35,
{ 25: } 36,
{ 26: } 37,
{ 27: } 38,
{ 28: } 40,
{ 29: } 41,
{ 30: } 43,
{ 31: } 44,
{ 32: } 45,
{ 33: } 47
);

yymh : array [0..yynstates-1] of Integer = (
{ 0: } 0,
{ 1: } 0,
{ 2: } 2,
{ 3: } 4,
{ 4: } 6,
{ 5: } 8,
{ 6: } 10,
{ 7: } 12,
{ 8: } 14,
{ 9: } 16,
{ 10: } 18,
{ 11: } 20,
{ 12: } 22,
{ 13: } 24,
{ 14: } 25,
{ 15: } 26,
{ 16: } 26,
{ 17: } 27,
{ 18: } 28,
{ 19: } 29,
{ 20: } 30,
{ 21: } 32,
{ 22: } 33,
{ 23: } 34,
{ 24: } 35,
{ 25: } 36,
{ 26: } 37,
{ 27: } 39,
{ 28: } 40,
{ 29: } 42,
{ 30: } 43,
{ 31: } 44,
{ 32: } 46,
{ 33: } 48
);

yytl : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 14,
{ 2: } 27,
{ 3: } 29,
{ 4: } 31,
{ 5: } 33,
{ 6: } 35,
{ 7: } 37,
{ 8: } 39,
{ 9: } 40,
{ 10: } 40,
{ 11: } 40,
{ 12: } 40,
{ 13: } 40,
{ 14: } 40,
{ 15: } 40,
{ 16: } 42,
{ 17: } 43,
{ 18: } 45,
{ 19: } 46,
{ 20: } 48,
{ 21: } 50,
{ 22: } 51,
{ 23: } 53,
{ 24: } 54,
{ 25: } 56,
{ 26: } 58,
{ 27: } 60,
{ 28: } 61,
{ 29: } 63,
{ 30: } 64,
{ 31: } 66,
{ 32: } 68,
{ 33: } 69
);

yyth : array [0..yynstates-1] of Integer = (
{ 0: } 13,
{ 1: } 26,
{ 2: } 28,
{ 3: } 30,
{ 4: } 32,
{ 5: } 34,
{ 6: } 36,
{ 7: } 38,
{ 8: } 39,
{ 9: } 39,
{ 10: } 39,
{ 11: } 39,
{ 12: } 39,
{ 13: } 39,
{ 14: } 39,
{ 15: } 41,
{ 16: } 42,
{ 17: } 44,
{ 18: } 45,
{ 19: } 47,
{ 20: } 49,
{ 21: } 50,
{ 22: } 52,
{ 23: } 53,
{ 24: } 55,
{ 25: } 57,
{ 26: } 59,
{ 27: } 60,
{ 28: } 62,
{ 29: } 63,
{ 30: } 65,
{ 31: } 67,
{ 32: } 68,
{ 33: } 69
);


var yyn : Integer;

label start, scan, action;

begin

start:

  (* initialize: *)

  yynew;

scan:

  (* mark positions and matches: *)

  for yyn := yykl[yystate] to     yykh[yystate] do yymark(yyk[yyn]);
  for yyn := yymh[yystate] downto yyml[yystate] do yymatch(yym[yyn]);

  if yytl[yystate]>yyth[yystate] then goto action; (* dead state *)

  (* get next character: *)

  yyscan;

  (* determine action: *)

  yyn := yytl[yystate];
  while (yyn<=yyth[yystate]) and not (yyactchar in yyt[yyn].cc) do inc(yyn);
  if yyn>yyth[yystate] then goto action;
    (* no transition on yyactchar in this state *)

  (* switch to new state: *)

  yystate := yyt[yyn].s;

  goto scan;

action:

  (* execute action: *)

  if yyfind(yyrule) then
    begin
      yyaction(yyrule);
      if yyreject then goto action;
    end
  else if not yydefault and yywrap then
    begin
      yyclear;
      returni(0);
    end;

  if not yydone then goto start;

  yylex := yyretval;

end(*yylex*);


end. 
