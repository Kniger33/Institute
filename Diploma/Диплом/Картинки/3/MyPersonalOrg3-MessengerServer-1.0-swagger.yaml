openapi: 3.0.0
info:
  version: '1.0'
  title: 'Messenger`s server API'
  description: API for server of OSU messenger

##эндпоинты для сообщений

servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/MyPersonalOrg3/MessengerServer/1.0
    
tags:
  - name: chat
    description: Everything about chat
  - name: user
    description: Everything about user
  - name: document
    description: Everything about document
  - name: message
    description: Everything about message
  - name: adminFunctionality
    description: Functions that allowed only for admin
    
paths: 
  /api/v1/{userId}/requestToCreateChat:
    parameters:
        - $ref: '#/components/parameters/userId'
    post:
      summary: Send request to admin to create new personal chat with some user
      responses:
        '201':
          description: Successfully created chat
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatInfo'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
              
  ########## Все чаты пользователя ##########
  /api/v1/{userId}/chats:
    parameters:
        - $ref: '#/components/parameters/userId'
    get:
      tags:
        - chat
      summary: Returns a list of chatsInfo of user
      responses:
        '200':
          description: Successfully returned a list of chats if this student
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatInfo'
    post:
      tags:
        - chat
        - adminFunctionality
      summary: Add new chat
      responses:
        '201':
          description: Created chat and returns some metainfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewChat'
  
  ########## Конкретный чат ##########
  /api/v1/{userId}/chats/{chatId}:
    parameters:
        - $ref: '#/components/parameters/chatId'
        - $ref: '#/components/parameters/userId'
        - name: last
          in: query
          description: Count of last messages in chat which should be returned
          schema:
            type: integer
            minimum: 1
            example: 1
    get:
      tags:
        - chat
      summary: Returns a chat by {chatId} 
      responses:
        '200':
          description: Successfully returned chat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
    put:
      tags:
        - chat
        - adminFunctionality
      summary: Change information about chat by {chatId} 
      responses:
        '200':
          description: Successfully changed info about chat
        '403':
          description: Allowed only for admin 
        '404':
          description: There is no such chat
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatInfo'
    delete:
      tags:
        - chat
        - adminFunctionality
      summary: Delete chat
      description: This only can be done by admin
      responses:
        '200':
          description: Chat deleted successfully
        '403':
          description: Allowed only for admin 
        '404':
          description: There is no such chat
      
  
  ######### Проверка на наличие новых сообщений
  /api/v1/{userId}/chats/{chatId}/haveNewMessages:
    parameters:
        - $ref: '#/components/parameters/chatId'
        - $ref: '#/components/parameters/userId'
    get:
      tags:
        - chat
      summary: Returns a flag for new messages for chat
      responses:
        '200':
          description: Successfully returned flag
          content:
            application/json:
              schema:
                type: boolean
  
  ########## Работа со списком сообщений ##########
  /api/v1/{userId}/chats/{chatId}/messages:
    parameters:
        - $ref: '#/components/parameters/chatId'
        - $ref: '#/components/parameters/userId'
        - name: last
          in: query
          description: Count of last messages in chat which should be returned
          schema:
            type: integer
            minimum: 1
            example: 1
    get:
      tags:
        - message
      summary: Get list of messages and set flag "is new messages" to false
      responses:
        '200':
          description: Successfully returned list of messages in current chat
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
    post:
      tags:
        - message
      summary: Add new message to chat and set flag "is new messages" to true
      responses:
        '200':
          description: Successfully added new message to current chat
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMessage'
  
  ########## Работа с конкретным сообщением ##########
  /api/v1/{userId}/chats/{chatId}/messages/{messageId}:
    parameters:
        - $ref: '#/components/parameters/chatId'
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/messageId'
    get:
      tags:
        - message
      summary: Get message
      responses:
        '200':
          description: Successfully returned message in current chat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '404':
          description: There is no such message
    put:
      tags:
      - message
      summary: Change text in message
      responses:
        '200':
          description: Successfully changed message`s text
        '404':
          description: There is no such message
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
    delete:
      tags:
      - message
      summary: Delete message
      responses:
        '200':
          description: Successfully deleted message
        '404':
          description: There is no such message
    
  ########## Пользователи одного чата ##########          
  /api/v1/{userId}/chats/{chatId}/users:
    parameters:
        - $ref: '#/components/parameters/chatId'
        - $ref: '#/components/parameters/userId'
    get:
      tags:
        - user
      summary: Returns all users of {chatId} chat
      responses:
        '200':
          description: Successfully returned users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - user
        - adminFunctionality
      summary: Add new user to {chatId} chat
      responses:
        '200':
          description: Successfully added new user
        #код ошибки добавления
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
  
  ########## Конкретный пользователь чата ##########    
  /api/v1/{userId}/chats/{chatId}/users/{userInChatId}:
    parameters:
        - $ref: '#/components/parameters/chatId'
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/userInChatId'
    get:
      tags:
        - user
      summary: Returns info about {userId} user
      responses:
        '200':
          description: Successfully returned info users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - user
        - adminFunctionality
      summary: Change info about {userId} user
      responses:
        '200':
          description: Successfully changed info
        '404':
          description: There is no such user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
    delete:
      tags:
        - user
        - adminFunctionality
      summary: Delete {userId} user
      responses:
        '200':
          description: Successfully deleted user
        '403':
          description: Allowed only for admin 
        '404':
          description: There is no such user
  
  ########## Документы чата ##########
  /api/v1/{userId}/chats/{chatId}/documents:
    parameters:
      - $ref: '#/components/parameters/chatId'
      - $ref: '#/components/parameters/userId'
    get:
      tags:
        - document
      summary: Returns all documents info of chat {chatId} 
      responses:
        '200':
          description: Successfully returned documents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DocumentMetainfo'
    post:
      tags:
        - document
      summary: Create metadata about new document in chat {chatId} 
      responses:
        '201':
          description: Created metadata and returns that with doc`s id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewDocumentMetainfo'
  
  ########## Метаданные об одном документа чата ##########
  /api/v1/{userId}/chats/{chatId}/documents/{documentId}:
    parameters:
        - $ref: '#/components/parameters/chatId'
        - $ref: '#/components/parameters/documentId'
        - $ref: '#/components/parameters/userId'
    get:
      tags:
        - document
      description: Returns a metadata about {documentId} document
      responses:
        '200':
          description: Successfully returned a metadata about {documentId} document
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DocumentMetainfo'
    put:
      tags:
        - document
      description: Change a metadata about {documentId} document
      responses:
        '200':
          description: Successfully changed a metadata about {documentId} document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentMetainfo'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentMetainfo'
              
    delete:
      tags:
        - document
      description: Delete {documentId} document
      responses:
        '200':
          description: Successfully deleted {documentId} document
          
  ########## Один документ ##########
  /api/v1/{userId}/chats/{chatId}/documents/{documentId}/data:
    parameters:
        - $ref: '#/components/parameters/chatId'
        - $ref: '#/components/parameters/documentId'
        - $ref: '#/components/parameters/userId'
    get:
      tags:
        - document
      description: Returns a {documentId} document
      responses:
        '200':
          description: Successfully returned a document by {documentId} document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentMetainfo'
    post:
      tags:
        - document
      description: Load a {documentId} document to server
      responses:
        '200':
          description: Successfully loaded the document 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentMetainfo'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentMetainfo'
        
  
  ########## Все метаданные документов пользователя в чате ##########
  /api/v1/{userId}/chats/{chatId}/userDocuments:
    parameters:
        - $ref: '#/components/parameters/chatId'
        - $ref: '#/components/parameters/userId'
    get:
      tags:
        - chat
        - user, document
      description: Returns info about all documents of {userId} user
      responses:
        '200':
          description: Successfully returned info of all docs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DocumentMetainfo'
  
  
  
components:
  schemas:
    Chat:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
          example: 1
        name:
          type: string
          example: 71ПГ
        messages:
          type: array
          items:
            #  ----- Added line  --------------------------------
            $ref: '#/components/schemas/Message'
            #  ---- /Added line  --------------------------------
        messages_count:
          type: integer
          minimum: 0
          example: 10
        deleted:
          type: boolean
          example: false
        chat_type:
          type: string
          enum: [laboratory, practice, lecture, personal, exam, consultation]
          example: practic
        participants:
          type: array
          items:
            #  ----- Added line  --------------------------------
            $ref: '#/components/schemas/User'
            #  ---- /Added line  --------------------------------
        attachments_info:
          type: array
          items:
            #  ----- Added line  --------------------------------
            $ref: '#/components/schemas/DocumentMetainfo'
            #  ---- /Added line  --------------------------------
    ChatInfo:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
          example: 1
        name:
          type: string
          example: 71ПГ
        messages_count:
          type: integer
          minimum: 0
          example: 10
        deleted:
          type: boolean
          example: false
        chat_type:
          type: string
          enum: [laboratory, practice, lecture, personal, exam, consultation]
          example: practic
        participants_number:
          type: integer
          minimum: 0
          example: 10
    NewChat:
      type: object
      properties:
        name:
          type: string
          example: 71ПГ
        chat_type:
          type: string
          enum: [laboratory, practice, lecture, personal, exam, consultation]
          example: practic
        participants_number:
          type: integer
          minimum: 0
          example: 10
    Message:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
          example: 1
        chat_id:
          type: integer
          minimum: 1
          example: 1
        user_recipient_id:
          type: integer
          minimum: 1
          example: 1
        deleted:
          type: boolean
          example: false
        data:
          type: string
          example: Какой-то текст
        date:
          type: string
          format: date-time
          example: 2021-05-14 17:21:20   #Y-m-d H:m:s
        attachments_info:
          type: array
          items:
            #  ----- Added line  --------------------------------
            $ref: '#/components/schemas/DocumentMetainfo'
            #  ---- /Added line  --------------------------------
    NewMessage:
      type: object
      properties:
        chat_id:
          type: integer
          minimum: 1
          example: 1
        user_recipient_id:  #0 - Сообщение для всего чата, какое-то значение - получатель сообщения
          type: integer
          minimum: 0
          example: 1
        data:
          type: string
          example: Какой-то текст
        date:
          type: string
          format: date-time
          example: 2021-05-14 17:21:20   #Y-m-d H:m:s
    UpdateMessage:
      type: object
      properties:
        data:
            type: string
            example: Какой-то текст
        date:
            type: string
            format: date-time
            example: 2021-05-14 17:21:20   #Y-m-d H:m:s
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
          minimum: 1
        role:
          type: string
          enum: [student, teacher, admin]
          example: student
        name:
          type: string
          example: Владислав
        surname:
          type: string
          example: Шорин
        patronymic: 
          type: string
          example: Дмитриевич
        deleted:
          type: boolean
          example: false
    NewUser:
      type: object
      properties:
        role:
          type: string
          enum: [student, teacher, admin]
          example: student
        name:
          type: string
          example: Владислав
        surname:
          type: string
          example: Шорин
        patronymic: 
          type: string
          example: Дмитриевич
    DocumentMetainfo:
      type: object
      properties:
        id:
          type: integer
          example: 1
          minimum: 1
        name:
          type: string
        date:
          type: string
          example: 2021-05-14 17:21:20   #Y-m-d H:m:s
        link:
          type: string
        message_id:
          type: integer
    NewDocumentMetainfo:
      type: object
      properties:
        name:
          type: string
        date:
          type: string
          example: 2021-05-14 17:21:20   #Y-m-d H:m:s
        message_id:
          type: integer
  parameters:
    chatId:
      name: chatId
      in: path
      required: true
      description: Numeric ID of the chat to get
      schema:
        type: integer
        minimum: 1
    documentId:
      name: documentId
      in: path
      required: true
      description: Numeric ID of the document to get
      schema:
        type: integer
        minimum: 1
    userId:
      name: userId
      in: path
      required: true
      description: Numeric ID of the user to get
      schema:
        type: integer
        minimum: 1
    userInChatId:
      name: userInChatId
      in: path
      required: true
      description: Numeric ID of the user in chat to get
      schema:
        type: integer
        minimum: 1
    messageId:
      name: messageId
      in: path
      required: true
      description: Numeric ID of the message to get
      schema:
        type: integer
        minimum: 1