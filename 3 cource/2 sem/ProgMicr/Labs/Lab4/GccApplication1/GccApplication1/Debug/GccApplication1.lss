
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000003cc  00000460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800102  00800102  00000462  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000462  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a81  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008fc  00000000  00000000  00000fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000480  00000000  00000000  000018a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00001d24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047f  00000000  00000000  00001e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000016a  00000000  00000000  0000229f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002409  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_2>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_7>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__vector_9>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf ef       	ldi	r28, 0xFF	; 255
  6a:	d0 e1       	ldi	r29, 0x10	; 16
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	11 e0       	ldi	r17, 0x01	; 1
  72:	a0 e0       	ldi	r26, 0x00	; 0
  74:	b1 e0       	ldi	r27, 0x01	; 1
  76:	ec ec       	ldi	r30, 0xCC	; 204
  78:	f3 e0       	ldi	r31, 0x03	; 3
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a2 30       	cpi	r26, 0x02	; 2
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	21 e0       	ldi	r18, 0x01	; 1
  88:	a2 e0       	ldi	r26, 0x02	; 2
  8a:	b1 e0       	ldi	r27, 0x01	; 1
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	ab 30       	cpi	r26, 0x0B	; 11
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 77 01 	call	0x2ee	; 0x2ee <main>
  9a:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <Speed>:
int k3 = 0;

char i_LED = 0;

void Speed(){
	TCCR1B = 0x00;
  a2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	switch(k3){
  a6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <k3>
  aa:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <k3+0x1>
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	91 05       	cpc	r25, r1
  b2:	49 f0       	breq	.+18     	; 0xc6 <Speed+0x24>
  b4:	82 30       	cpi	r24, 0x02	; 2
  b6:	91 05       	cpc	r25, r1
  b8:	51 f0       	breq	.+20     	; 0xce <Speed+0x2c>
  ba:	89 2b       	or	r24, r25
  bc:	59 f4       	brne	.+22     	; 0xd4 <Speed+0x32>
		case 0: TCCR1B = 0x05; break;
  be:	85 e0       	ldi	r24, 0x05	; 5
  c0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
  c4:	08 95       	ret
		case 1: TCCR1B = 0x04; break;
  c6:	84 e0       	ldi	r24, 0x04	; 4
  c8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
  cc:	08 95       	ret
		case 2: TCCR1B = 0x03; break;
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
  d4:	08 95       	ret

000000d6 <Timers>:
	}
}

void Timers(){
	switch (k2){
  d6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <k2>
  da:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <k2+0x1>
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	91 05       	cpc	r25, r1
  e2:	89 f0       	breq	.+34     	; 0x106 <Timers+0x30>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	91 05       	cpc	r25, r1
  e8:	19 f1       	breq	.+70     	; 0x130 <Timers+0x5a>
  ea:	89 2b       	or	r24, r25
  ec:	81 f5       	brne	.+96     	; 0x14e <Timers+0x78>
		case 0:
		{
			DDRE = 0;
  ee:	1d b8       	out	0x0d, r1	; 13
			DDRH = 0xFF;
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>
			TCCR1B = 0x00;
  f6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
			TIMSK1 = 1 << TOIE1;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
			Speed();
 100:	0e 94 51 00 	call	0xa2	; 0xa2 <Speed>
			break;	
 104:	24 c0       	rjmp	.+72     	; 0x14e <Timers+0x78>
		}
		case 1:
		{
			DDRE = 0;
 106:	1d b8       	out	0x0d, r1	; 13
			DDRH = 0xFF;
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>
			TCCR1B = 0x00;
 10e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
			TIMSK1 = 1 << OCIE1A;
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
			OCR1A = 200;
 118:	88 ec       	ldi	r24, 0xC8	; 200
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 120:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
			PORTH = 0b10101010;
 124:	8a ea       	ldi	r24, 0xAA	; 170
 126:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__DATA_REGION_ORIGIN__+0x7a>
			Speed();
 12a:	0e 94 51 00 	call	0xa2	; 0xa2 <Speed>
			break;
 12e:	0f c0       	rjmp	.+30     	; 0x14e <Timers+0x78>
		}
		case 2:
		{
			DDRH = 0;
 130:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>
			DDRB = 1 << 5;
 134:	80 e2       	ldi	r24, 0x20	; 32
 136:	84 b9       	out	0x04, r24	; 4
			OCR1A = 200;
 138:	88 ec       	ldi	r24, 0xC8	; 200
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 140:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
			TCCR1A = 1 << COM1A0;
 144:	80 e4       	ldi	r24, 0x40	; 64
 146:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
			Speed();
 14a:	0e 94 51 00 	call	0xa2	; 0xa2 <Speed>
			break;
		}
	}
	if (!k1){
 14e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <k1>
 152:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <k1+0x1>
 156:	89 2b       	or	r24, r25
 158:	29 f4       	brne	.+10     	; 0x164 <Timers+0x8e>
		TCCR1B = 0x00;
 15a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
		PORTH = 0;
 15e:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__DATA_REGION_ORIGIN__+0x7a>
		PORTE = 0;
 162:	1e b8       	out	0x0e, r1	; 14
 164:	08 95       	ret

00000166 <Seting>:
	}
}

void Seting(){
	PCMSK0 = (1 << PCINT0) | (1 << PCINT1) | (1 << PCINT2);
 166:	87 e0       	ldi	r24, 0x07	; 7
 168:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
	
	EIMSK = 1 << PCIE0;
 16c:	80 e1       	ldi	r24, 0x10	; 16
 16e:	8d bb       	out	0x1d, r24	; 29
	
	sei();
 170:	78 94       	sei
 172:	08 95       	ret

00000174 <__vector_2>:
}

ISR(PCINT0_vect){
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	2f 93       	push	r18
 180:	3f 93       	push	r19
 182:	4f 93       	push	r20
 184:	5f 93       	push	r21
 186:	6f 93       	push	r22
 188:	7f 93       	push	r23
 18a:	8f 93       	push	r24
 18c:	9f 93       	push	r25
 18e:	af 93       	push	r26
 190:	bf 93       	push	r27
 192:	ef 93       	push	r30
 194:	ff 93       	push	r31
	cli();
 196:	f8 94       	cli

	//если нажата кнопка1, то включить/выключить гирлянду
	if (PINE & (1 << PINE0)){
 198:	60 9b       	sbis	0x0c, 0	; 12
 19a:	13 c0       	rjmp	.+38     	; 0x1c2 <__vector_2+0x4e>
		if (k1 == 0) k1 = 1; else k1 = 0;
 19c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <k1>
 1a0:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <k1+0x1>
 1a4:	89 2b       	or	r24, r25
 1a6:	39 f4       	brne	.+14     	; 0x1b6 <__vector_2+0x42>
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <k1+0x1>
 1b0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <k1>
 1b4:	04 c0       	rjmp	.+8      	; 0x1be <__vector_2+0x4a>
 1b6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <k1+0x1>
 1ba:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <k1>
		Timers();
 1be:	0e 94 6b 00 	call	0xd6	; 0xd6 <Timers>
	}
	
	//если  нажата кнопка2, то изменить режим
	if (PINE & (1 << PINE1)){
 1c2:	61 9b       	sbis	0x0c, 1	; 12
 1c4:	13 c0       	rjmp	.+38     	; 0x1ec <__vector_2+0x78>
		if ( k2 == 3) k2 = 0; else k2++; 
 1c6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <k2>
 1ca:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <k2+0x1>
 1ce:	83 30       	cpi	r24, 0x03	; 3
 1d0:	91 05       	cpc	r25, r1
 1d2:	29 f4       	brne	.+10     	; 0x1de <__vector_2+0x6a>
 1d4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <k2+0x1>
 1d8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <k2>
 1dc:	05 c0       	rjmp	.+10     	; 0x1e8 <__vector_2+0x74>
 1de:	01 96       	adiw	r24, 0x01	; 1
 1e0:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <k2+0x1>
 1e4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <k2>
		Timers();
 1e8:	0e 94 6b 00 	call	0xd6	; 0xd6 <Timers>
	}
	
	//если нажата кнопка3, то изменить скорость
	if (PINE & (1 << PINE2)){
 1ec:	62 9b       	sbis	0x0c, 2	; 12
 1ee:	35 c0       	rjmp	.+106    	; 0x25a <__vector_2+0xe6>
		if (up){
 1f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1f8:	89 2b       	or	r24, r25
 1fa:	b9 f0       	breq	.+46     	; 0x22a <__vector_2+0xb6>
			k3++;
 1fc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <k3>
 200:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <k3+0x1>
 204:	01 96       	adiw	r24, 0x01	; 1
 206:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <k3+0x1>
 20a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <k3>
			if (k3 == 3) up = 0; else up = 1;
 20e:	03 97       	sbiw	r24, 0x03	; 3
 210:	29 f4       	brne	.+10     	; 0x21c <__vector_2+0xa8>
 212:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 216:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 21a:	1d c0       	rjmp	.+58     	; 0x256 <__vector_2+0xe2>
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 224:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 228:	16 c0       	rjmp	.+44     	; 0x256 <__vector_2+0xe2>
			}else {
			k3--;
 22a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <k3>
 22e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <k3+0x1>
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <k3+0x1>
 238:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <k3>
			if (k3 == 0) up = 1; else up = 0;
 23c:	89 2b       	or	r24, r25
 23e:	39 f4       	brne	.+14     	; 0x24e <__vector_2+0xda>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 248:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 24c:	04 c0       	rjmp	.+8      	; 0x256 <__vector_2+0xe2>
 24e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 252:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		}
		Speed();
 256:	0e 94 51 00 	call	0xa2	; 0xa2 <Speed>
	}
	
	sei();
 25a:	78 94       	sei
}
 25c:	ff 91       	pop	r31
 25e:	ef 91       	pop	r30
 260:	bf 91       	pop	r27
 262:	af 91       	pop	r26
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	7f 91       	pop	r23
 26a:	6f 91       	pop	r22
 26c:	5f 91       	pop	r21
 26e:	4f 91       	pop	r20
 270:	3f 91       	pop	r19
 272:	2f 91       	pop	r18
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <__vector_9>:

ISR (TIMER1_OVF_vect){
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	8f 93       	push	r24
 28a:	9f 93       	push	r25
	PORTH  = 1 << i_LED;
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	00 90 02 01 	lds	r0, 0x0102	; 0x800102 <__data_end>
 294:	02 c0       	rjmp	.+4      	; 0x29a <__vector_9+0x1c>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	0a 94       	dec	r0
 29c:	e2 f7       	brpl	.-8      	; 0x296 <__vector_9+0x18>
 29e:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__DATA_REGION_ORIGIN__+0x7a>
	i_LED++;
	i_LED = i_LED % 8;
 2a2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 2a6:	8f 5f       	subi	r24, 0xFF	; 255
 2a8:	87 70       	andi	r24, 0x07	; 7
 2aa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
}
 2ae:	9f 91       	pop	r25
 2b0:	8f 91       	pop	r24
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <__vector_7>:

ISR (TIMER1_COMPA_vect){
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	8f 93       	push	r24
 2c8:	ef 93       	push	r30
 2ca:	ff 93       	push	r31
	PORTH = ~PORTH;
 2cc:	ea ed       	ldi	r30, 0xDA	; 218
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	80 95       	com	r24
 2d4:	80 83       	st	Z, r24
	TCNT1 = 0;
 2d6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 2da:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
}
 2de:	ff 91       	pop	r31
 2e0:	ef 91       	pop	r30
 2e2:	8f 91       	pop	r24
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <main>:

int main(void)
{
	DDRH = 0xFF;
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>
	DDRE = 0x00;
 2f4:	1d b8       	out	0x0d, r1	; 13
	
	Seting();
 2f6:	0e 94 b3 00 	call	0x166	; 0x166 <Seting>
			Speed();
		}
	
		//третий режим
		if (k1 && (k2 == 2)){
			PORTH = ~PORTH;
 2fa:	ca ed       	ldi	r28, 0xDA	; 218
 2fc:	d0 e0       	ldi	r29, 0x00	; 0
			if (i == 7) i = 0; else i++;
		}
	
		//второй режим
		if (k1 && (k2 == 1)){
			PORTH = 0b01010101;
 2fe:	0f 2e       	mov	r0, r31
 300:	f5 e5       	ldi	r31, 0x55	; 85
 302:	cf 2e       	mov	r12, r31
 304:	f0 2d       	mov	r31, r0
			Speed();
			PORTH = 0b10101010;
 306:	0f 2e       	mov	r0, r31
 308:	fa ea       	ldi	r31, 0xAA	; 170
 30a:	df 2e       	mov	r13, r31
 30c:	f0 2d       	mov	r31, r0
			PORTH = 0;
		}
	
		//первый режим
		if (k1 && (k2 == 0)){
			PORTH = (1 << i);
 30e:	0f 2e       	mov	r0, r31
 310:	f9 e0       	ldi	r31, 0x09	; 9
 312:	ef 2e       	mov	r14, r31
 314:	f1 e0       	ldi	r31, 0x01	; 1
 316:	ff 2e       	mov	r15, r31
 318:	f0 2d       	mov	r31, r0
 31a:	01 e0       	ldi	r16, 0x01	; 1
 31c:	10 e0       	ldi	r17, 0x00	; 0
	
	Seting();
	
	while (1) {
		//выключить все
		if (!k1) {
 31e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <k1>
 322:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <k1+0x1>
 326:	89 2b       	or	r24, r25
 328:	39 f4       	brne	.+14     	; 0x338 <main+0x4a>
			PORTH = 0;
 32a:	18 82       	st	Y, r1
		}
	
		//первый режим
		if (k1 && (k2 == 0)){
 32c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <k1>
 330:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <k1+0x1>
 334:	89 2b       	or	r24, r25
 336:	99 f3       	breq	.-26     	; 0x31e <main+0x30>
 338:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <k2>
 33c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <k2+0x1>
 340:	89 2b       	or	r24, r25
 342:	11 f5       	brne	.+68     	; 0x388 <main+0x9a>
			PORTH = (1 << i);
 344:	c8 01       	movw	r24, r16
 346:	f7 01       	movw	r30, r14
 348:	00 80       	ld	r0, Z
 34a:	02 c0       	rjmp	.+4      	; 0x350 <main+0x62>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	0a 94       	dec	r0
 352:	e2 f7       	brpl	.-8      	; 0x34c <main+0x5e>
 354:	88 83       	st	Y, r24
			Speed();
 356:	0e 94 51 00 	call	0xa2	; 0xa2 <Speed>
			if (i == 7) i = 0; else i++;
 35a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <i>
 35e:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <i+0x1>
 362:	87 30       	cpi	r24, 0x07	; 7
 364:	91 05       	cpc	r25, r1
 366:	29 f4       	brne	.+10     	; 0x372 <main+0x84>
 368:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <i+0x1>
 36c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <i>
 370:	05 c0       	rjmp	.+10     	; 0x37c <main+0x8e>
 372:	01 96       	adiw	r24, 0x01	; 1
 374:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <i+0x1>
 378:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <i>
		}
	
		//второй режим
		if (k1 && (k2 == 1)){
 37c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <k1>
 380:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <k1+0x1>
 384:	89 2b       	or	r24, r25
 386:	59 f2       	breq	.-106    	; 0x31e <main+0x30>
 388:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <k2>
 38c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <k2+0x1>
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	69 f4       	brne	.+26     	; 0x3ae <main+0xc0>
			PORTH = 0b01010101;
 394:	c8 82       	st	Y, r12
			Speed();
 396:	0e 94 51 00 	call	0xa2	; 0xa2 <Speed>
			PORTH = 0b10101010;
 39a:	d8 82       	st	Y, r13
			Speed();
 39c:	0e 94 51 00 	call	0xa2	; 0xa2 <Speed>
		}
	
		//третий режим
		if (k1 && (k2 == 2)){
 3a0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <k1>
 3a4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <k1+0x1>
 3a8:	89 2b       	or	r24, r25
 3aa:	09 f4       	brne	.+2      	; 0x3ae <main+0xc0>
 3ac:	b8 cf       	rjmp	.-144    	; 0x31e <main+0x30>
 3ae:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <k2>
 3b2:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <k2+0x1>
 3b6:	02 97       	sbiw	r24, 0x02	; 2
 3b8:	09 f0       	breq	.+2      	; 0x3bc <main+0xce>
 3ba:	b1 cf       	rjmp	.-158    	; 0x31e <main+0x30>
			PORTH = ~PORTH;
 3bc:	88 81       	ld	r24, Y
 3be:	80 95       	com	r24
 3c0:	88 83       	st	Y, r24
			Speed();
 3c2:	0e 94 51 00 	call	0xa2	; 0xa2 <Speed>
 3c6:	ab cf       	rjmp	.-170    	; 0x31e <main+0x30>

000003c8 <_exit>:
 3c8:	f8 94       	cli

000003ca <__stop_program>:
 3ca:	ff cf       	rjmp	.-2      	; 0x3ca <__stop_program>
