
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000266  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000266  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000afd  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000943  00000000  00000000  00000e05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b9  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00001b04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000494  00000000  00000000  00001b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001cb  00000000  00000000  00001ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000021bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf ef       	ldi	r28, 0xFF	; 255
  6a:	d0 e1       	ldi	r29, 0x10	; 16
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	11 e0       	ldi	r17, 0x01	; 1
  72:	a0 e0       	ldi	r26, 0x00	; 0
  74:	b1 e0       	ldi	r27, 0x01	; 1
  76:	e2 ef       	ldi	r30, 0xF2	; 242
  78:	f1 e0       	ldi	r31, 0x01	; 1
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a0 30       	cpi	r26, 0x00	; 0
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	21 e0       	ldi	r18, 0x01	; 1
  88:	a0 e0       	ldi	r26, 0x00	; 0
  8a:	b1 e0       	ldi	r27, 0x01	; 1
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a8 30       	cpi	r26, 0x08	; 8
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  9a:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <Speed>:
		}
	}
}

void Speed(int k3){
	switch(k3){
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	91 05       	cpc	r25, r1
  a6:	61 f0       	breq	.+24     	; 0xc0 <Speed+0x1e>
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	91 05       	cpc	r25, r1
  ac:	81 f0       	breq	.+32     	; 0xce <Speed+0x2c>
  ae:	89 2b       	or	r24, r25
  b0:	b9 f4       	brne	.+46     	; 0xe0 <Speed+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	87 ea       	ldi	r24, 0xA7	; 167
  b4:	91 e6       	ldi	r25, 0x61	; 97
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <Speed+0x14>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <Speed+0x1a>
  bc:	00 00       	nop
  be:	08 95       	ret
  c0:	83 e2       	ldi	r24, 0x23	; 35
  c2:	94 ef       	ldi	r25, 0xF4	; 244
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <Speed+0x22>
  c8:	00 c0       	rjmp	.+0      	; 0xca <Speed+0x28>
  ca:	00 00       	nop
  cc:	08 95       	ret
  ce:	9f e9       	ldi	r25, 0x9F	; 159
  d0:	26 e8       	ldi	r18, 0x86	; 134
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	91 50       	subi	r25, 0x01	; 1
  d6:	20 40       	sbci	r18, 0x00	; 0
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <Speed+0x32>
  dc:	00 c0       	rjmp	.+0      	; 0xde <Speed+0x3c>
  de:	00 00       	nop
  e0:	08 95       	ret

000000e2 <main>:
}


int main(void)
{
    DDRH = 0xFF;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>

	PCMSK0 = (1 << PCINT0) | (1 << PCINT1) | (1 << PCINT2);
  e8:	87 e0       	ldi	r24, 0x07	; 7
  ea:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
	
	EIMSK = 0x11110001;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	8d bb       	out	0x1d, r24	; 29
	
	sei();
  f2:	78 94       	sei
			Speed(k3);
		}
		
		//третий режим
		if (k1 && (k2 == 2)){
			PORTH = ~PORTH;
  f4:	ca ed       	ldi	r28, 0xDA	; 218
  f6:	d0 e0       	ldi	r29, 0x00	; 0
			if (i == 7) i = 0; else i++;
		}
		
		//второй режим
		if (k1 && (k2 == 1)){
			PORTH = 0b01010101;
  f8:	0f 2e       	mov	r0, r31
  fa:	f5 e5       	ldi	r31, 0x55	; 85
  fc:	cf 2e       	mov	r12, r31
  fe:	f0 2d       	mov	r31, r0
			Speed(k3);
			PORTH = 0b10101010;
 100:	0f 2e       	mov	r0, r31
 102:	fa ea       	ldi	r31, 0xAA	; 170
 104:	df 2e       	mov	r13, r31
 106:	f0 2d       	mov	r31, r0
			_delay_ms(200);
		}
		
		//первый режим
		if (k1 && (k2 == 0)){
			PORTH = (1 << i);
 108:	0f 2e       	mov	r0, r31
 10a:	f6 e0       	ldi	r31, 0x06	; 6
 10c:	ef 2e       	mov	r14, r31
 10e:	f1 e0       	ldi	r31, 0x01	; 1
 110:	ff 2e       	mov	r15, r31
 112:	f0 2d       	mov	r31, r0
 114:	01 e0       	ldi	r16, 0x01	; 1
 116:	10 e0       	ldi	r17, 0x00	; 0
	sei();
	
    while (1) 
    {
		//выключить все
		if (!k1) {
 118:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <k1>
 11c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <k1+0x1>
 120:	89 2b       	or	r24, r25
 122:	69 f4       	brne	.+26     	; 0x13e <main+0x5c>
			PORTH = 0;
 124:	18 82       	st	Y, r1
 126:	8f e4       	ldi	r24, 0x4F	; 79
 128:	93 ec       	ldi	r25, 0xC3	; 195
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0x48>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x4e>
 130:	00 00       	nop
			_delay_ms(200);
		}
		
		//первый режим
		if (k1 && (k2 == 0)){
 132:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <k1>
 136:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <k1+0x1>
 13a:	89 2b       	or	r24, r25
 13c:	69 f3       	breq	.-38     	; 0x118 <main+0x36>
 13e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <k2>
 142:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <k2+0x1>
 146:	89 2b       	or	r24, r25
 148:	31 f5       	brne	.+76     	; 0x196 <main+0xb4>
			PORTH = (1 << i);
 14a:	c8 01       	movw	r24, r16
 14c:	f7 01       	movw	r30, r14
 14e:	00 80       	ld	r0, Z
 150:	02 c0       	rjmp	.+4      	; 0x156 <main+0x74>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	0a 94       	dec	r0
 158:	e2 f7       	brpl	.-8      	; 0x152 <main+0x70>
 15a:	88 83       	st	Y, r24
			Speed(k3);
 15c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 160:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 164:	0e 94 51 00 	call	0xa2	; 0xa2 <Speed>
			if (i == 7) i = 0; else i++;
 168:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <i>
 16c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <i+0x1>
 170:	87 30       	cpi	r24, 0x07	; 7
 172:	91 05       	cpc	r25, r1
 174:	29 f4       	brne	.+10     	; 0x180 <main+0x9e>
 176:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <i+0x1>
 17a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <i>
 17e:	05 c0       	rjmp	.+10     	; 0x18a <main+0xa8>
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <i+0x1>
 186:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <i>
		}
		
		//второй режим
		if (k1 && (k2 == 1)){
 18a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <k1>
 18e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <k1+0x1>
 192:	89 2b       	or	r24, r25
 194:	09 f2       	breq	.-126    	; 0x118 <main+0x36>
 196:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <k2>
 19a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <k2+0x1>
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	a9 f4       	brne	.+42     	; 0x1cc <main+0xea>
			PORTH = 0b01010101;
 1a2:	c8 82       	st	Y, r12
			Speed(k3);
 1a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 1a8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 1ac:	0e 94 51 00 	call	0xa2	; 0xa2 <Speed>
			PORTH = 0b10101010;
 1b0:	d8 82       	st	Y, r13
			Speed(k3);
 1b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 1b6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 1ba:	0e 94 51 00 	call	0xa2	; 0xa2 <Speed>
		}
		
		//третий режим
		if (k1 && (k2 == 2)){
 1be:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <k1>
 1c2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <k1+0x1>
 1c6:	89 2b       	or	r24, r25
 1c8:	09 f4       	brne	.+2      	; 0x1cc <main+0xea>
 1ca:	a6 cf       	rjmp	.-180    	; 0x118 <main+0x36>
 1cc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <k2>
 1d0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <k2+0x1>
 1d4:	02 97       	sbiw	r24, 0x02	; 2
 1d6:	09 f0       	breq	.+2      	; 0x1da <main+0xf8>
 1d8:	9f cf       	rjmp	.-194    	; 0x118 <main+0x36>
			PORTH = ~PORTH;
 1da:	88 81       	ld	r24, Y
 1dc:	80 95       	com	r24
 1de:	88 83       	st	Y, r24
			Speed(k3);
 1e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 1e4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 1e8:	0e 94 51 00 	call	0xa2	; 0xa2 <Speed>
 1ec:	95 cf       	rjmp	.-214    	; 0x118 <main+0x36>

000001ee <_exit>:
 1ee:	f8 94       	cli

000001f0 <__stop_program>:
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <__stop_program>
